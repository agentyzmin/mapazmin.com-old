import math

STREETS = {
    'Heorhiivskyi': [[30.51162058101846, 50.452596829127025], [30.512195375672956, 50.452327790822174],
                     [30.512848774724663, 50.45210254945067], [30.514150506091838, 50.451700185230834],
                     [30.513844295293396, 50.45136767828719], [30.51352841468026, 50.451427201135125],
                     [30.512332580930543, 50.451786390734746], [30.511475707345497, 50.45232770430572],
                     [30.51162058101846, 50.452596829127025]],
    'Irynynska': [[30.515503126074748, 50.45104715630667], [30.517544301619935, 50.45071774080085],
                  [30.517659980435567, 50.450996476998085], [30.515650361936252, 50.45132589250391],
                  [30.515503126074748, 50.45104715630667]],
    'Malopidvalna': [[30.515100353314367, 50.450058446413216], [30.51719585445577, 50.449732097005565],
                     [30.51704067555675, 50.449450902861855], [30.514993985352795, 50.44978751482951],
                     [30.515100353314367, 50.450058446413216]],
    'Prorizna': [[30.51470655213987, 50.44901103890705], [30.514555689319188, 50.44866646511366],
                 [30.516654139026464, 50.448322346351645], [30.516737371345027, 50.448697748637485],
                 [30.51470655213987, 50.44901103890705]],
    'Volodymyrska': [[30.51774180203687, 50.45588594782891], [30.517679730477262, 50.45584131428521],
                     [30.517020925515055, 50.454233141738285], [30.517445551411466, 50.45376261377404],
                     [30.51703362197043, 50.45282797022287], [30.51656103168705, 50.45263006980034],
                     [30.516315566883147, 50.45239231501931], [30.515299753048556, 50.449985605519586],
                     [30.51412181637371, 50.446942663898135], [30.513497843160692, 50.44545081786032],
                     [30.512928766973076, 50.445612933362504], [30.513145914465724, 50.4461994100322],
                     [30.5129512305068, 50.446614234993696], [30.513250744289756, 50.447071972882235],
                     [30.513533584903065, 50.44725782561492], [30.513904442273994, 50.44808638902866],
                     [30.514262286366176, 50.44911758666569], [30.514860215589344, 50.45048806184429],
                     [30.515637986592235, 50.45241711185129], [30.515234385809734, 50.45292137294349],
                     [30.515021902482136, 50.45319628887512], [30.51585285162061, 50.45417851809428],
                     [30.516271834647966, 50.454159445682265], [30.516785335732, 50.455351843096075],
                     [30.51706183631571, 50.456023645749674], [30.51774180203687, 50.45588594782891]],
    'Khmelnytskogo': [[30.515408387707332, 50.44530528018842], [30.513667688479256, 50.44562197759005],
                      [30.513000521527744, 50.445784188454304], [30.503030474069707, 50.44745968551907],
                      [30.501343691332735, 50.44775261204966], [30.501545863136226, 50.448129292187105],
                      [30.50565668980724, 50.4474474534573], [30.51113816772581, 50.446560405269665],
                      [30.51598545904341, 50.44581269953124], [30.515408387707332, 50.44530528018842]],
    'Lysenka': [[30.511671900467743, 50.44623804720302], [30.51185170611646, 50.4466365921035],
                [30.51208923151144, 50.44734368784535], [30.51281314762905, 50.449151785199355],
                [30.51225790646193, 50.44924932632141], [30.511632160698117, 50.44765062965395],
                [30.511151841466038, 50.446317066004674], [30.511671900467743, 50.44623804720302]],
    'Rylskyi_prov': [[30.51372806905192, 50.454808220516455], [30.513661157058802, 50.45441461121975],
                     [30.516680942654475, 50.453907818133864], [30.516713389151544, 50.4542727091557],
                     [30.51401929834353, 50.45472375500214], [30.51372806905192, 50.454808220516455]],
    'Stritenska': [[30.512241076642017, 50.453630746004414], [30.50896896585705, 50.45453427316001],
                   [30.507782701608793, 50.45482848452172], [30.508018514800387, 50.4551100362361],
                   [30.50839679846191, 50.45508500941704], [30.508588396680075, 50.45496926037892],
                   [30.50988536923385, 50.45462201326451], [30.51260792769519, 50.4539009525432],
                   [30.512241076642017, 50.453630746004414]],
    'Honchara': [[30.507740846778084, 50.451440450529745], [30.50655777895563, 50.45103404440726],
                 [30.50515672835742, 50.450616930756325], [30.503433896839777, 50.450057755893646],
                 [30.502235179782506, 50.449666711845886], [30.50242186522585, 50.45017350493178],
                 [30.503574462567947, 50.450539525076096], [30.505465008440634, 50.45113081513782],
                 [30.507413159788552, 50.45175150869626], [30.508587885547826, 50.452346780292956],
                 [30.50993191853675, 50.45334718899455], [30.510751310087244, 50.45395921454354],
                 [30.510958777331865, 50.45415715270347], [30.511129889279008, 50.45457018906848],
                 [30.511312517031875, 50.45523740238823], [30.511918190202874, 50.455287261336764],
                 [30.511858084525695, 50.45508716264922], [30.511705605423714, 50.454573562307495],
                 [30.51180871304349, 50.45436500548203], [30.51171773573191, 50.454264589232736],
                 [30.511626758420345, 50.45423755408869], [30.511311370406894, 50.45375478365937],
                 [30.50963620927751, 50.452637447143864], [30.50876266596185, 50.45194900555138],
                 [30.507740846778084, 50.451440450529745]],
    'Franka': [[30.508914233234552, 50.44669132528265], [30.509518607645628, 50.448104792132106],
               [30.509875369136072, 50.448912143258724], [30.510136170762568, 50.44947601912017],
               [30.510170254094945, 50.44983042025913], [30.510398055705966, 50.45047162339608],
               [30.510417782717926, 50.45060699139447], [30.51004770339037, 50.45093133896945],
               [30.50991638491931, 50.45059938949819], [30.509753231667375, 50.450176217271476],
               [30.50955028493936, 50.44970236573617], [30.50946447619487, 50.449377381547926],
               [30.509115194609898, 50.44860009717679], [30.5088496873505, 50.44797215113215],
               [30.508438708443848, 50.44698187341981], [30.508621467941442, 50.44678403178833],
               [30.508914233234552, 50.44669132528265]],
    'Lypynskoho': [[30.503684430983306, 50.449039879823225], [30.50536371567394, 50.449156442232976],
                   [30.506386408009234, 50.44919698567985], [30.50837816475075, 50.448915317378045],
                   [30.50952687126915, 50.44878383613368], [30.50965818974022, 50.44906257233092],
                   [30.508607641971675, 50.44924501784183], [30.507111407271008, 50.449460404903334],
                   [30.506275941272293, 50.449581723431265], [30.50508704976468, 50.44948474450742],
                   [30.50374926574405, 50.44939677087221], [30.50345594803185, 50.44930030280831],
                   [30.503684430983306, 50.449039879823225]],
    'Kotsiubynskoho': [[30.504054776728232, 50.44750726236412], [30.504202159972984, 50.44785763783091],
                       [30.504334804893254, 50.448173601421495], [30.50423163662193, 50.44867100945023],
                       [30.503827473417548, 50.449221340464405], [30.503152425799232, 50.4500745232328],
                       [30.503034633228335, 50.45018113284738], [30.502920684164703, 50.4503126528398],
                       [30.50284043118912, 50.45047043503617], [30.502642006591724, 50.450633363438556],
                       [30.502443581994328, 50.45025596805751], [30.502642006591724, 50.450029863335836],
                       [30.50266066650354, 50.449904929490906], [30.50275414137886, 50.44974483355507],
                       [30.50320217612606, 50.449186550291664], [30.503618090785906, 50.448654777527],
                       [30.50374853064297, 50.44833550755934], [30.503520118099704, 50.44758577288203],
                       [30.504054776728232, 50.44750726236412]],
    'Yaroslaviv_Val': [[30.505643145821526, 50.45416079364676], [30.505822854091292, 50.45400821435058],
                       [30.50627212476573, 50.453593389389084], [30.506384442434328, 50.45338359285684],
                       [30.506526711481243, 50.45324531786968], [30.506826225264184, 50.453149955809565],
                       [30.507843921604753, 50.45234811582373], [30.50823145984103, 50.45207653743576],
                       [30.508662085782472, 50.45172508056321], [30.50987246289629, 50.45079929580428],
                       [30.510063360341036, 50.450682417112446], [30.510503815320995, 50.45028881493895],
                       [30.51114638364507, 50.44974939325974], [30.511808674819203, 50.44924835634224],
                       [30.51201725595585, 50.449071310842946], [30.51246929004141, 50.44903035536889],
                       [30.512771720459625, 50.44895940433687], [30.51291099762592, 50.44891632692457],
                       [30.513698908452323, 50.448774424860524], [30.51429183124594, 50.4486781341742],
                       [30.51450327464834, 50.44865672040905], [30.514638572467017, 50.44901147556916],
                       [30.513225904066122, 50.44926487211211], [30.512322592159077, 50.4494194440033],
                       [30.51166751831615, 50.44996610304106], [30.511030693301407, 50.45046573391175],
                       [30.50971751850334, 50.45146898084655], [30.508525390949462, 50.45238505648536],
                       [30.50855117712197, 50.4525410473972], [30.50766141465605, 50.45315903272905],
                       [30.506832339741045, 50.45387017897113], [30.50633123670891, 50.454248709609345],
                       [30.505643145821526, 50.45416079364676]],
    'Velyka_Zhytomyrska': [[30.519405037690913, 50.455090813970756], [30.514455442888348, 50.45523371401784],
                           [30.51342391238128, 50.45520650251604], [30.50856447272454, 50.454943097248076],
                           [30.507879367314953, 50.454844243109996], [30.507687769096787, 50.45492245191954],
                           [30.50742739203107, 50.45515707834819], [30.507422479256245, 50.455397961481616],
                           [30.5082625637513, 50.45528534079586], [30.509451455258912, 50.45533226608159],
                           [30.51237007480472, 50.45549168903601], [30.51439126171785, 50.45560176725907],
                           [30.519532002244656, 50.45546506869794], [30.519405037690913, 50.455090813970756]],
    'Reitarska': [[30.50748130220007, 50.455054457670876], [30.507151016348597, 50.45487708009082],
                  [30.507664352190037, 50.454266394422326], [30.509236615751494, 50.4526146225605],
                  [30.5106845588838, 50.45174422557281], [30.51402077265236, 50.45070633445069],
                  [30.514451033471524, 50.451095126084724], [30.514519026275106, 50.451149184013886],
                  [30.51547406970106, 50.45111877642873], [30.5155417186104, 50.45144565796913],
                  [30.51400569043365, 50.45163823934177], [30.513619693715665, 50.45148366745057],
                  [30.513516230677848, 50.451225202976765], [30.51098568540491, 50.45199827418419],
                  [30.509587744478146, 50.45286656225053], [30.50754488110526, 50.45504907007295],
                  [30.50748130220007, 50.455054457670876]],
    'Striletska': [[30.51002851350589, 50.450975135577906], [30.510250435752972, 50.4510931755429],
                   [30.511656389173947, 50.45236864756473], [30.51247165362332, 50.45360393490233],
                   [30.513902960915892, 50.45451814293553], [30.51405995217825, 50.45541986692206],
                   [30.513598347855705, 50.45535905175175], [30.51347100873225, 50.45463687160436],
                   [30.512099259839683, 50.45376450838541], [30.51126794828746, 50.45253429471807],
                   [30.510679925553024, 50.451961140136476], [30.50976900915576, 50.451188401952436],
                   [30.51002851350589, 50.450975135577906]],
    'Sofiivska': [[30.516466513630373, 50.45271669769735], [30.518341356873993, 50.45226035586316],
                  [30.518146677891586, 50.45197148380421], [30.516164620135918, 50.452445335339505],
                  [30.516466513630373, 50.45271669769735]],
    'Volodymyrskyi': [[30.51925973381274, 50.45480490357515], [30.517043496991278, 50.45394187693114],
                      [30.51762048035218, 50.4530740821841], [30.51808460633198, 50.452916734784914],
                      [30.51899734040167, 50.453889427798075], [30.51925973381274, 50.45480490357515]],
    'Bulvarno_Kudriavska': [[30.503674687831104, 50.45317172159406], [30.506003407493544, 50.454192095637275],
                            [30.505545607673103, 50.45477923538597], [30.50403341011648, 50.4541549017541],
                            [30.503674687831104, 50.45317172159406]],
    'Zolotovoritska': [[30.513723958772854, 50.44900103784537], [30.514641142942438, 50.45120245293356],
                       [30.513924860372978, 50.45088570725488], [30.51374181038301, 50.45074633915627],
                       [30.51382935603038, 50.45060443709222], [30.51320991048621, 50.44910374670796],
                       [30.513723958772854, 50.44900103784537]]
}


def length(A, B):
    return math.sqrt((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2)


def line_intersection(A, B, C, D):
    AB = [A[0] - B[0], A[1] - B[1]]
    CD = [C[0] - D[0], C[1] - D[1]]

    c = AB[0] * CD[1] - AB[1] * CD[0]

    if math.fabs(c) < 0.0000001:
        return False
    else:
        a = A[0] * B[1] - A[1] * B[0]
        b = C[0] * D[1] - C[1] * D[0]

        x = (a * CD[0] - b * AB[0]) / c
        y = (a * CD[1] - b * AB[1]) / c

        lenab = length(A, B)
        lencd = length(C, D)
        L = (x, y)

        if length(L, A) < lenab and length(L, B) < lenab and length(L, C) < lencd and length(L, D) < lencd: return True

        return False


def belongs_to_polygon(lat, lng, polygon):
    curr = []
    for i in range(1, len(polygon)):
        curr.append(polygon[i - 1] + polygon[i])
    polygon = curr

    count_of_intersections_to_north = 0
    count_of_intersections_to_east = 0
    count_of_intersections_to_northeast = 0
    for side in polygon:
        # shooting a ray from point to north
        if line_intersection((lat, lng), (lat + 100, lng), (side[0], side[1]), (side[2], side[3])):
            # print (side[0], side[1]), (side[2], side[3])
            count_of_intersections_to_north += 1
        # shooting a ray from point to east
        if line_intersection((lat, lng), (lat, lng + 100), (side[0], side[1]), (side[2], side[3])):
            count_of_intersections_to_east += 1
        # shooting a ray from point to northeast
        if line_intersection((lat, lng), (lat + 100, lng + 100), (side[0], side[1]), (side[2], side[3])):
            count_of_intersections_to_northeast += 1

    is_in_north = count_of_intersections_to_north % 2 == 1
    is_in_east = count_of_intersections_to_east % 2 == 1
    is_in_northeast = count_of_intersections_to_northeast % 2 == 1
    # print count_of_intersections_to_north
    # print count_of_intersections_to_east
    # print count_of_intersections_to_northeast

    if (is_in_north and is_in_east) or (is_in_north and is_in_northeast) or (is_in_east and is_in_northeast):
        return True
    return False


import geojson


def main():
    print(STREETS.keys())

    # for key, polygon in STREETS.items():
    #     curr = []
    #     for i in xrange(1, len(polygon)):
    #         curr.append(polygon[i - 1] + polygon[i])
    #     polygon = curr
    #     STREETS[key] = curr

    # facades block start

    # with open('facades.geoJSON') as infile:
    #     facades_json = geojson.load(infile)
    #
    # feature_collection = geojson.FeatureCollection([])
    #
    # for feature in facades_json.features:
    #     for key in STREETS:
    #         is_on_street = True
    #         for point in feature.geometry.coordinates:
    #             # print point
    #             if not belongs_to_polygon(point[0], point[1], STREETS[key]):
    #                 is_on_street = False
    #         if is_on_street:
    #             if 'streets' in feature.properties:
    #                 if not (key in feature.properties['streets']):
    #                     feature.properties['streets'].append(key)
    #             else:
    #                 feature.properties['streets'] = [key]
    #             feature_collection['features'].append(feature)
    #
    # print geojson.dumps(facades_json)

    # facades block end

    # trees block start
    #
    # with open('trees_GeoCoo.json.geojson') as infile:
    #     trees_json = geojson.load(infile)
    #
    # feature_collection = geojson.FeatureCollection([]);
    #
    # for feature in trees_json.features:
    #     for key in STREETS:
    #         if belongs_to_polygon(feature.geometry.coordinates[0],feature.geometry.coordinates[1],STREETS[key]):
    #             if 'streets' in feature.properties:
    #                 if not (key in feature.properties['streets']):
    #                     feature.properties['streets'].append(key)
    #             else:
    #                 feature.properties['streets'] = [key]
    #             feature_collection['features'].append(feature)
    #
    # print geojson.dumps(trees_json)

    # trees block end

    # first floor fucntion/buildings/cars block start

    with open('Yarvalcars_night_GeoCoo.json.geojson') as infile:
        fff_json = geojson.load(infile)

    feature_collection = geojson.FeatureCollection([])

    for feature in fff_json.features:
        for key in STREETS:
            is_on_street = False
            for point in feature.geometry.coordinates[0]:
                if belongs_to_polygon(point[0], point[1], STREETS[key]):
                    is_on_street = True
            if is_on_street:
                if 'streets' in feature.properties:
                    if not (key in feature.properties['streets']):
                        feature.properties['streets'].append(key)
                else:
                    feature.properties['streets'] = [key]
                feature_collection['features'].append(feature)

    print(geojson.dumps(fff_json))

    # with open('cars.geojson', 'w') as outfile:
    #     geojson.dump(fff_json, outfile)



    # first floor fucntion block end








    #
    #
    # with open('facades.geoJSON') as infile:
    #     facades_json = geojson.load(infile)
    #
    # print facades_json.features
    #
    # feature_collection = geojson.FeatureCollection([])
    # count_lines = 0
    #
    # for feature in facades_json.features:
    #     count_lines += len(feature.geometry.coordinates) - 1
    #     if len(feature.geometry.coordinates) > 2:
    #         print feature.geometry.coordinates
    #         for i in xrange(1, len(feature.geometry.coordinates)):
    #             print feature.geometry.coordinates[i - 1:i + 1]
    #             curr_geometry = geojson.LineString(feature.geometry.coordinates[i - 1:i + 1])
    #             feature_collection['features'].append(
    #                 geojson.Feature(geometry=curr_geometry, properties=feature.properties))
    #             # print feature.geometry.coordinates
    #     else:
    #         feature_collection['features'].append(feature)
    #
    # print feature_collection
    # print len(feature_collection.features)
    # print count_lines
    # print geojson.dumps(feature_collection)
    #
    # with open('facadesN.geoJSON', 'w') as outfile:
    #     geojson.dump(feature_collection, outfile)


if __name__ == 'main':
    main()

# main()
